#! /usr/bin/env python3

from lxml import etree
import subprocess
import pathlib
import struct
import os
import argparse
from os import walk

# Shell colors
class colors:
    HEADER = "\033[95m"
    INFO = "\033[94m"
    NOTE = "\033[96m"
    OK = "\033[92m"
    WARNING = "\033[93m"
    FAIL = "\033[91m"
    END = "\033[0m"
    BOLD = "\033[1m"

# Execute shell command
class shell:
    # Execute a simple shell command and communicating output
    def cmd(string, stdout=True):
        process = subprocess.Popen(
            string.split(),
            stderr=subprocess.DEVNULL,
            universal_newlines=True,
        )
        process.communicate()
        return process

    # Setting up output folders
    def setup(name):
        # Creating output directory
        try:
            os.mkdir(f"output_{name}")
            os.mkdir(f"output_{name}/rooms")
            os.mkdir(f"output_{name}/assets")
            os.mkdir(f"output_{name}/assets/objects")
            os.mkdir(f"output_{name}/assets/objects/{name}")
            os.mkdir(f"output_{name}/assets/sprites")
            os.mkdir(f"output_{name}/assets/sprites/{name}")
            os.mkdir(f"output_{name}/scripts")
            os.mkdir(f"output_{name}/scripts/{name}")
        except OSError:
            print(f"{colors.WARNING}Warning: folders already exist{colors.END}")

        # Exporting to XML
        # print(f"{colors.INFO}Exporting to XML{colors.END}")
        shell.cmd(f"ffdec -cli -swf2xml {name}.swf output_{name}/{name}.xml")

    # Exporting a targeted sprite to PNG
    def ffdec(swf, zoom, id, stdout=True):
        if stdout:
            print(f"{colors.INFO}Exporting element {id} to PNG{colors.END}")
        process = shell.cmd(
            f"ffdec -cli -format shape:png,sprite:png -zoom {zoom} -selectid {id} -export shape,sprite output_{swf}/assets/sprites/{swf} {swf}.swf",
            stdout,
        )
        process.wait()

    # Optional optimization by indexing colors
    def optimize(image):
        print(f"{colors.INFO}Optimizing element {id} size{colors.END}")
        shell.cmd(f"magick {image} -quality 100 -type PaletteAlpha {image}")


# xml
class xml:
    # Parsing function and extracting scene
    def scene(xml):
        return (
            etree.parse(f"output_{xml}/{xml}.xml")
            .xpath("/swf/tags/item/subTags/item[@name='template_character']")[0]
            .getparent()
            .getparent()
        )

    def decor(xml):
        return (
            etree.parse(f"output_{xml}/{xml}.xml")
            .xpath("/swf/tags/item[@name='decor']")[0]
        )

    def collclip(xml):
        return (
            etree.parse(f"output_{xml}/{xml}.xml")
            .xpath("/swf/tags/item[@name='collclip']")[0]
        )


# importfile
class godot:
    def importfile(name, zoom, item):
        print(
            f"{colors.NOTE}Creating godot files for {item.get('characterId')}{colors.END}"
        )

        # Always prefer importing objects (packed scene)
        f = open(
            f"output_{name}/assets/objects/{name}/{item.get('characterId')}.tscn",
            "w",
        )

        f.write(
            f"""[gd_scene load_steps=1 format=2]

[ext_resource path="res://output_{name}/assets/sprites/{name}/{item.get('characterId')}.png" type="Texture" id=1]

[node name="{item.get('characterId')}" type="Node2D"]

[node name="Sprite" type="Sprite" parent="."]
texture = ExtResource( 1 )
scale = Vector2( {1 / int(zoom)}, {1 / int(zoom)} )
"""
        )
        f.close()

    # scene
    def scene(parent, zoom, name):
        # Model
        print(f"{colors.INFO}Exporting model to PNG{colors.END}")
        process = shell.cmd(
            f"ffdec -cli -format shape:png,sprite:png -zoom 1 -select 1 -selectid {parent.get('spriteId')} -export shape,sprite output_{name}/assets/sprites/{name} {name}.swf"
        )
        process.wait()

        f = open(
            f"output_{name}/assets/objects/{name}/{parent.get('spriteId')}.tscn",
            "w",
        )

        f.write(
            f"""[gd_scene load_steps=1 format=2]

[ext_resource path="res://output_{name}/assets/sprites/{name}/{parent.get('spriteId')}.png" type="Texture" id=1]

[node name="{parent.get('spriteId')}" type="Node2D"]

[node name="Sprite" type="Sprite" parent="."]
texture = ExtResource( 1 )
"""
        )
        f.close()

        for root, dirs, files in os.walk(f"output_{name}/assets/sprites/{name}/sprites/DefineSprite_{parent.get('spriteId')}"):
                try:
                    shell.cmd(
                        f'mv {os.path.join(root, files[0])} output_{name}/assets/sprites/{name}/{parent.get("spriteId")}.png'
                    )
                except:
                    print("Error mv model")

        imports = ""
        elements = ""
        i = 3
        last = "-1"

        decor = xml.decor(name)

        # FOR EACH ELEMENT
        for child in parent[0]:
            print(
                f"{colors.NOTE}Child element {child.get('characterId')}{colors.END}",
                end="\n",
            )

            if child.get("characterId") == None:
                break

            if last != child.get("characterId"):
                shell.ffdec(name, zoom, child.get("characterId"))
                godot.importfile(name, zoom, child)
                last = child.get("characterId")
            try:
                imports += f'[ext_resource path="res://output_{name}/assets/objects/{name}/{child.get("characterId")}.tscn" type="PackedScene" id={i}]\n'
                elements += f"""
[node name="{name}_{i}" parent="Decor" instance=ExtResource( { i } )]
position = Vector2( { int(child[0].get('translateX')) / 20 }, { int(child[0].get('translateY')) / 20 } )
scale = Vector2( {(1, int(child[0].get('scaleX')) / 65535)[int(child[0].get('scaleX')) != 0]}, {(1, int(child[0].get('scaleY')) / 65535)[int(child[0].get('scaleY')) != 0]} )
z_index = {child.get('depth')}"""
            except:
                print("Error import")
            i += 1

            # moving files
            for root, dirs, files in os.walk(f"output_{name}/assets/sprites/{name}/sprites/DefineSprite_{child.get('characterId')}"):
                if len(files) == 1:
                    try:
                        shell.cmd(
                            f'mv {os.path.join(root, files[0])} output_{name}/assets/sprites/{name}/{child.get("characterId")}.png'
                        )
                    except:
                        print("Error mv sprites")
                else:
                    try:
                        shell.cmd(
                            f'cp {os.path.join(root, files[0])} output_{name}/assets/sprites/{name}/{child.get("characterId")}.png'
                        )
                        shell.cmd(
                            f'mv {os.path.join(root)} output_{name}/assets/sprites/{name}/{child.get("characterId")}'
                        )
                    except:
                        print("Error mv multiple sprites")

            try:
                shell.cmd(
                    f'mv output_{name}/assets/sprites/{name}/shapes/{child.get("characterId")}.png output_{name}/assets/sprites/{name}/{child.get("characterId")}.png'
                )
            except:
                print("Error mv shapes")

        try:
            shell.cmd(
                f'rm -r output_{name}/assets/sprites/{name}/shapes output_{name}/assets/sprites/{name}/sprites'
            )
        except:
            print("Error removing sprites & shapes")

        f = open(f"output_{name}/rooms/{name}.tscn", "w")
        f.write(
            f"""[gd_scene load_steps=1 format=2]

[ext_resource path="res://output_{name}/scripts/{name}/{name}.gd" type="Script" id=1]
[ext_resource path="res://output_{name}/assets/objects/{name}/{parent.get('spriteId')}.tscn" type="PackedScene" id=2]
{imports}

[node name="World" type="YSort"]
script = ExtResource( 1 )

[node name="Players" type="YSort" parent="."]
z_index = 1

[node name="Decor" type="YSort" parent="."]
scale = Vector2( {(1, int(decor[0].get('scaleX')) / 65535)[int(decor[0].get('scaleX')) != 0]}, {(1, int(decor[0].get('scaleY')) / 65535)[int(decor[0].get('scaleY')) != 0]} )
__meta__ = {{
"_edit_lock_": true
}}

[node name="Model" parent="." instance=ExtResource( 2 )]
position = Vector2( 0, 0 )

{elements}""")

        f = open(f"output_{name}/scripts/{name}/{name}.gd", "w")
        # TODO
        f.write(
            f"""extends YSort

var droppedItems = []
export var roomName = ""

func _ready():
	Global.sendRoomReady()""")

        f.close()

    # Exporting collision map
    def collclip():
        print("salut")


def parser():
    # Arguments parser
    parser = argparse.ArgumentParser(
        description="Export your Chapatiz room to a Godot equivalent"
    )
    parser.add_argument(
        "file", metavar="file", type=pathlib.Path, nargs="+", help="targeted .swf file"
    )
    parser.add_argument(
        "--zoom",
        "-z",
        dest="zoom",
        default=4,
        help="set resolution of assets (default: 4)",
    )
    return parser


def main():
    args = parser().parse_args()

    print(
        f"""{colors.HEADER}█▀ █░█░█ █▀▀ ▀█ █▀▀ █▀█ █▀▄ █▀█ ▀█▀\n▄█ ▀▄▀▄▀ █▀░ █▄ █▄█ █▄█ █▄▀ █▄█ ░█░{colors.END}\n"""
    )

    for file in args.file:
        try:
            if not file.exists():
                raise RuntimeError

            print(
                f"{colors.HEADER}{colors.BOLD}› Converting {file} (zoom: {args.zoom}){colors.END}"
            )
            print(f"{colors.HEADER}{colors.BOLD}› Setting up output folder{colors.END}")
            shell.setup(file.stem)

            parent = xml.scene(file.stem)
            print(
                f"{colors.HEADER}{colors.BOLD}› Creating Godot scene (id: {parent.get('spriteId')}){colors.END}"
            )
            godot.scene(parent, args.zoom, file.stem)

            print(
                f"{colors.OK}{colors.BOLD}› {file} successfully converted{colors.END}\n"
            )
        except RuntimeError:
            print(
                f"{colors.FAIL}{colors.BOLD}Error: {file} does not exist.{colors.END}\n"
            )
            continue
        except:
            print(f"\n{colors.FAIL}{colors.BOLD}› {file} error{colors.END}")


# Main execution as a script
if __name__ == "__main__":
    main()
